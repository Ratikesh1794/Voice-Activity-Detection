{"ast":null,"code":"var _jsxFileName = \"/workspaces/Voice-Activity-Detection/vad-interface/frontend/src/components/FileUpload.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const FileUpload = ({ onResults }) => {\n//     const [file, setFile] = useState(null);\n//     const [error, setError] = useState(null);\n//     const [loading, setLoading] = useState(false);\n//     const [success, setSuccess] = useState(null);\n\n//     const handleFileChange = (e) => {\n//         setFile(e.target.files[0]);\n//         setError(null);  // Clear any previous errors\n//         setSuccess(null); // Clear previous success messages\n//     };\n\n//     const handleUpload = async () => {\n//         if (!file) {\n//             setError(\"Please select a file first.\");\n//             return;\n//         }\n\n//         setLoading(true);\n//         setError(null); // Clear any previous errors\n//         setSuccess(null); // Clear previous success messages\n\n//         const formData = new FormData();\n//         formData.append('file', file);\n\n//         try {\n//             const response = await axios.post('http://localhost:5000/upload', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data',\n//                 },\n//             });\n\n//             setSuccess(\"File uploaded and processed successfully.\");\n//             onResults(response.data.vad_results);\n//         } catch (error) {\n//             // Check if error response exists\n//             const errorMessage = error.response?.data?.error || error.message;\n//             setError(`There was an error uploading the file: ${errorMessage}`);\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <input \n//                 type=\"file\" \n//                 onChange={handleFileChange} \n//                 accept=\"audio/*\" // Limit file type to audio\n//             />\n//             <button onClick={handleUpload} disabled={loading}>\n//                 {loading ? \"Uploading...\" : \"Upload\"}\n//             </button>\n//             {success && <p style={{ color: 'green' }}>{success}</p>}\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//         </div>\n//     );\n// };\n\n// export default FileUpload;\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FileUpload({\n  onResults\n}) {\n  _s();\n  const [file, setFile] = useState(null);\n  const handleFileChange = event => {\n    const uploadedFile = event.target.files[0];\n    if (uploadedFile && uploadedFile.type === 'audio/mp3') {\n      setFile(uploadedFile);\n    } else {\n      alert('Please upload an MP3 file.');\n    }\n  };\n  const handleFileUpload = () => {\n    if (file) {\n      // For simplicity, we'll simulate a file processing result\n      // You should replace this with actual file processing logic\n      const simulatedTimestamps = [\n      // Example timestamps\n      {\n        start: 0,\n        end: 10\n      }, {\n        start: 15,\n        end: 30\n      }];\n      onResults(simulatedTimestamps);\n    } else {\n      alert('No file selected.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-upload\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"audio/mp3\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFileUpload,\n      children: \"Upload and Process\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n_s(FileUpload, \"Nkb8eHkBruGouXteoqeZ1R6wRVk=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FileUpload","onResults","_s","file","setFile","handleFileChange","event","uploadedFile","target","files","type","alert","handleFileUpload","simulatedTimestamps","start","end","className","children","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/workspaces/Voice-Activity-Detection/vad-interface/frontend/src/components/FileUpload.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const FileUpload = ({ onResults }) => {\n//     const [file, setFile] = useState(null);\n//     const [error, setError] = useState(null);\n//     const [loading, setLoading] = useState(false);\n//     const [success, setSuccess] = useState(null);\n\n//     const handleFileChange = (e) => {\n//         setFile(e.target.files[0]);\n//         setError(null);  // Clear any previous errors\n//         setSuccess(null); // Clear previous success messages\n//     };\n\n//     const handleUpload = async () => {\n//         if (!file) {\n//             setError(\"Please select a file first.\");\n//             return;\n//         }\n\n//         setLoading(true);\n//         setError(null); // Clear any previous errors\n//         setSuccess(null); // Clear previous success messages\n\n//         const formData = new FormData();\n//         formData.append('file', file);\n\n//         try {\n//             const response = await axios.post('http://localhost:5000/upload', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data',\n//                 },\n//             });\n\n//             setSuccess(\"File uploaded and processed successfully.\");\n//             onResults(response.data.vad_results);\n//         } catch (error) {\n//             // Check if error response exists\n//             const errorMessage = error.response?.data?.error || error.message;\n//             setError(`There was an error uploading the file: ${errorMessage}`);\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <input \n//                 type=\"file\" \n//                 onChange={handleFileChange} \n//                 accept=\"audio/*\" // Limit file type to audio\n//             />\n//             <button onClick={handleUpload} disabled={loading}>\n//                 {loading ? \"Uploading...\" : \"Upload\"}\n//             </button>\n//             {success && <p style={{ color: 'green' }}>{success}</p>}\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//         </div>\n//     );\n// };\n\n// export default FileUpload;\n\n\n\nimport React, { useState } from 'react';\n\nfunction FileUpload({ onResults }) {\n    const [file, setFile] = useState(null);\n\n    const handleFileChange = (event) => {\n        const uploadedFile = event.target.files[0];\n        if (uploadedFile && uploadedFile.type === 'audio/mp3') {\n            setFile(uploadedFile);\n        } else {\n            alert('Please upload an MP3 file.');\n        }\n    };\n\n    const handleFileUpload = () => {\n        if (file) {\n            // For simplicity, we'll simulate a file processing result\n            // You should replace this with actual file processing logic\n            const simulatedTimestamps = [\n                // Example timestamps\n                { start: 0, end: 10 },\n                { start: 15, end: 30 }\n            ];\n            onResults(simulatedTimestamps);\n        } else {\n            alert('No file selected.');\n        }\n    };\n\n    return (\n        <div className=\"file-upload\">\n            <input \n                type=\"file\" \n                accept=\"audio/mp3\" \n                onChange={handleFileChange} \n            />\n            <button onClick={handleFileUpload}>Upload and Process</button>\n        </div>\n    );\n}\n\nexport default FileUpload;\n\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,UAAUA,CAAC;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EAC/B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMQ,gBAAgB,GAAIC,KAAK,IAAK;IAChC,MAAMC,YAAY,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC1C,IAAIF,YAAY,IAAIA,YAAY,CAACG,IAAI,KAAK,WAAW,EAAE;MACnDN,OAAO,CAACG,YAAY,CAAC;IACzB,CAAC,MAAM;MACHI,KAAK,CAAC,4BAA4B,CAAC;IACvC;EACJ,CAAC;EAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC3B,IAAIT,IAAI,EAAE;MACN;MACA;MACA,MAAMU,mBAAmB,GAAG;MACxB;MACA;QAAEC,KAAK,EAAE,CAAC;QAAEC,GAAG,EAAE;MAAG,CAAC,EACrB;QAAED,KAAK,EAAE,EAAE;QAAEC,GAAG,EAAE;MAAG,CAAC,CACzB;MACDd,SAAS,CAACY,mBAAmB,CAAC;IAClC,CAAC,MAAM;MACHF,KAAK,CAAC,mBAAmB,CAAC;IAC9B;EACJ,CAAC;EAED,oBACIZ,OAAA;IAAKiB,SAAS,EAAC,aAAa;IAAAC,QAAA,gBACxBlB,OAAA;MACIW,IAAI,EAAC,MAAM;MACXQ,MAAM,EAAC,WAAW;MAClBC,QAAQ,EAAEd;IAAiB;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eACFxB,OAAA;MAAQyB,OAAO,EAAEZ,gBAAiB;MAAAK,QAAA,EAAC;IAAkB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7D,CAAC;AAEd;AAACrB,EAAA,CArCQF,UAAU;AAAAyB,EAAA,GAAVzB,UAAU;AAuCnB,eAAeA,UAAU;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}